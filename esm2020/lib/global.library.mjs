export const downLoadFile = (x, filename) => {
    const newBlob = new Blob([x], { type: 'binary' });
    const nativator = window.navigator;
    // IE doesn't allow using a blob object directly as link href
    // instead it is necessary to use msSaveOrOpenBlob
    if (nativator && nativator.msSaveOrOpenBlob) {
        nativator.msSaveOrOpenBlob(newBlob);
        return;
    }
    // For other browsers:
    // Create a link pointing to the ObjectURL containing the blob.
    const data = window.URL.createObjectURL(newBlob);
    const link = document.createElement('a');
    link.href = data;
    link.download = filename;
    // this is necessary as link.click() does not work on the latest firefox
    link.dispatchEvent(new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
    }));
    setTimeout(() => {
        // For Firefox it is necessary to delay revoking the ObjectURL
        window.URL.revokeObjectURL(data);
        link.remove();
    }, 100);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmxpYnJhcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9vbmJvYXJkaW5nL3NyYy9saWIvZ2xvYmFsLmxpYnJhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBTSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUNyRCxNQUFNLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbEQsTUFBTSxTQUFTLEdBQWdCLE1BQWMsQ0FBQyxTQUF1QixDQUFBO0lBQ3JFLDZEQUE2RDtJQUM3RCxrREFBa0Q7SUFDbEQsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFO1FBQ3pDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQyxPQUFPO0tBQ1Y7SUFDRCxzQkFBc0I7SUFDdEIsK0RBQStEO0lBQy9ELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDekIsd0VBQXdFO0lBQ3hFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sRUFBRSxJQUFJO1FBQ2IsVUFBVSxFQUFFLElBQUk7UUFDaEIsSUFBSSxFQUFFLE1BQU07S0FDZixDQUFDLENBQUMsQ0FBQztJQUNKLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWiw4REFBOEQ7UUFDOUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW50ZXJmYWNlIElOYXZpZ2F0b3Ige1xuICAgIG1zU2F2ZU9yT3BlbkJsb2I6IChibG9iT3JCYXNlNjQ6IEJsb2IgfCBzdHJpbmcsIGZpbGVuYW1lPzogc3RyaW5nKSA9PiB2b2lkXG59XG5leHBvcnQgY29uc3QgZG93bkxvYWRGaWxlID0gKHg6IGFueSwgZmlsZW5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IG5ld0Jsb2IgPSBuZXcgQmxvYihbeF0sIHsgdHlwZTogJ2JpbmFyeScgfSk7XG4gICAgY29uc3QgbmF0aXZhdG9yOiBJTmF2aWdhdG9yID0gKHdpbmRvdyBhcyBhbnkpLm5hdmlnYXRvciBhcyBJTmF2aWdhdG9yXG4gICAgLy8gSUUgZG9lc24ndCBhbGxvdyB1c2luZyBhIGJsb2Igb2JqZWN0IGRpcmVjdGx5IGFzIGxpbmsgaHJlZlxuICAgIC8vIGluc3RlYWQgaXQgaXMgbmVjZXNzYXJ5IHRvIHVzZSBtc1NhdmVPck9wZW5CbG9iXG4gICAgaWYgKG5hdGl2YXRvciAmJiBuYXRpdmF0b3IubXNTYXZlT3JPcGVuQmxvYikge1xuICAgICAgICBuYXRpdmF0b3IubXNTYXZlT3JPcGVuQmxvYihuZXdCbG9iKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBGb3Igb3RoZXIgYnJvd3NlcnM6XG4gICAgLy8gQ3JlYXRlIGEgbGluayBwb2ludGluZyB0byB0aGUgT2JqZWN0VVJMIGNvbnRhaW5pbmcgdGhlIGJsb2IuXG4gICAgY29uc3QgZGF0YSA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ld0Jsb2IpO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGluay5ocmVmID0gZGF0YTtcbiAgICBsaW5rLmRvd25sb2FkID0gZmlsZW5hbWU7XG4gICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgYXMgbGluay5jbGljaygpIGRvZXMgbm90IHdvcmsgb24gdGhlIGxhdGVzdCBmaXJlZm94XG4gICAgbGluay5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgdmlldzogd2luZG93XG4gICAgfSkpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAvLyBGb3IgRmlyZWZveCBpdCBpcyBuZWNlc3NhcnkgdG8gZGVsYXkgcmV2b2tpbmcgdGhlIE9iamVjdFVSTFxuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChkYXRhKTtcbiAgICAgICAgbGluay5yZW1vdmUoKTtcbiAgICB9LCAxMDApO1xufSJdfQ==