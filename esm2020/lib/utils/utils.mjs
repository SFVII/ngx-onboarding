import _ from "lodash";
export function fieldWidth(type, length, index) {
    if (type === 'textarea') {
        if (length === 1) {
            return '100%';
        }
        return '50%';
    }
    else if (type === 'toggle') {
        return '50%';
    }
    else if (type === "text" || type === "date" || type === "none" || type == 'select' || type === 'tel' || type === 'email' || type === 'password') {
        if (length < 3) {
            return '50%';
        }
        else if (length === 3) {
            return '33%';
        }
        else if (length === 4) {
            return '25%';
        }
        else if (length === 5) {
            return index <= 2 ? '33%' : '50%';
        }
        else if (length >= 6) {
            return '33%';
        }
    }
    return '100%';
}
export function getIntesectFilterBy(groupResult, textResult, key) {
    return _.intersectionBy(groupResult, textResult, key);
}
export const filterParse = (filterConfig, active = 'CreatedDate') => {
    if (filterConfig) {
        const filterData = {};
        const filterDate = {};
        for (const data of filterConfig) {
            if (data.filterData.type !== 'divider' && data.filterData.type !== 'date' && !!data.filterData?.value) {
                filterData[data.filterData.key] = data.filterData.value;
            }
            else if (data.filterData.type !== 'divider') {
                filterDate.active = active;
                if (data.filterData.operator === "gte") {
                    filterDate["valueStart"] = !!data.filterData.value ? data.filterData.value : null;
                }
                else {
                    filterDate["valueEnd"] = !!data.filterData.value ? data.filterData.value : null;
                }
            }
        }
        return { filterData, filterDate };
    }
    return {};
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vbmJvYXJkaW5nL3NyYy9saWIvdXRpbHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFBO0FBRXRCLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxLQUFhO0lBQ2xFLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUNyQixJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDZCxPQUFPLE1BQU0sQ0FBQTtTQUNoQjtRQUNELE9BQU8sS0FBSyxDQUFBO0tBQ2Y7U0FBTSxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDMUIsT0FBTyxLQUFLLENBQUE7S0FDZjtTQUFNLElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxPQUFPLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUMvSSxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDWixPQUFPLEtBQUssQ0FBQTtTQUNmO2FBQU0sSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxDQUFBO1NBQ2Y7YUFBTSxJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckIsT0FBTyxLQUFLLENBQUE7U0FDZjthQUFNLElBQUksTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQixPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO1NBQ3BDO2FBQU0sSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sS0FBSyxDQUFBO1NBQ2Y7S0FDSjtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsV0FBa0IsRUFBRSxVQUFpQixFQUFFLEdBQVc7SUFDbEYsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFDekQsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLFlBQWlCLEVBQUUsTUFBTSxHQUFHLGFBQWEsRUFBRSxFQUFFO0lBQ3JFLElBQUksWUFBWSxFQUFFO1FBQ2QsTUFBTSxVQUFVLEdBQVEsRUFBRSxDQUFBO1FBQzFCLE1BQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQTtRQUMxQixLQUFLLE1BQU0sSUFBSSxJQUFJLFlBQVksRUFBRTtZQUM3QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFO2dCQUNuRyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQTthQUMxRDtpQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDM0MsVUFBVSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7Z0JBQzFCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO29CQUNwQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2lCQUNyRjtxQkFBTTtvQkFDSCxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2lCQUNuRjthQUNKO1NBQ0o7UUFDRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxDQUFBO0tBQ3BDO0lBQ0QsT0FBTyxFQUFFLENBQUE7QUFFYixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tIFwibG9kYXNoXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWVsZFdpZHRoKHR5cGU6IHN0cmluZywgbGVuZ3RoOiBudW1iZXIsIGluZGV4OiBudW1iZXIpIHtcclxuICAgIGlmICh0eXBlID09PSAndGV4dGFyZWEnKSB7XHJcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJzEwMCUnXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnNTAlJ1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAndG9nZ2xlJykge1xyXG4gICAgICAgIHJldHVybiAnNTAlJ1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcInRleHRcIiB8fCB0eXBlID09PSBcImRhdGVcIiB8fCB0eXBlID09PSBcIm5vbmVcIiB8fCB0eXBlID09ICdzZWxlY3QnIHx8IHR5cGUgPT09ICd0ZWwnIHx8IHR5cGUgPT09ICdlbWFpbCcgfHwgdHlwZSA9PT0gJ3Bhc3N3b3JkJykge1xyXG4gICAgICAgIGlmIChsZW5ndGggPCAzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnNTAlJ1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMzMlJ1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSA0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnMjUlJ1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID09PSA1KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA8PSAyID8gJzMzJScgOiAnNTAlJ1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGVuZ3RoID49IDYpIHtcclxuICAgICAgICAgICAgcmV0dXJuICczMyUnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcxMDAlJ1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZXNlY3RGaWx0ZXJCeShncm91cFJlc3VsdDogYW55W10sIHRleHRSZXN1bHQ6IGFueVtdLCBrZXk6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIF8uaW50ZXJzZWN0aW9uQnkoZ3JvdXBSZXN1bHQsIHRleHRSZXN1bHQsIGtleSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZpbHRlclBhcnNlID0gKGZpbHRlckNvbmZpZzogYW55LCBhY3RpdmUgPSAnQ3JlYXRlZERhdGUnKSA9PiB7XHJcbiAgICBpZiAoZmlsdGVyQ29uZmlnKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyRGF0YTogYW55ID0ge31cclxuICAgICAgICBjb25zdCBmaWx0ZXJEYXRlOiBhbnkgPSB7fVxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiBmaWx0ZXJDb25maWcpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuZmlsdGVyRGF0YS50eXBlICE9PSAnZGl2aWRlcicgJiYgZGF0YS5maWx0ZXJEYXRhLnR5cGUgIT09ICdkYXRlJyAmJiAhIWRhdGEuZmlsdGVyRGF0YT8udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlckRhdGFbZGF0YS5maWx0ZXJEYXRhLmtleV0gPSBkYXRhLmZpbHRlckRhdGEudmFsdWVcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmZpbHRlckRhdGEudHlwZSAhPT0gJ2RpdmlkZXInKSB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJEYXRlLmFjdGl2ZSA9IGFjdGl2ZVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZmlsdGVyRGF0YS5vcGVyYXRvciA9PT0gXCJndGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckRhdGVbXCJ2YWx1ZVN0YXJ0XCJdID0gISFkYXRhLmZpbHRlckRhdGEudmFsdWUgPyBkYXRhLmZpbHRlckRhdGEudmFsdWUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJEYXRlW1widmFsdWVFbmRcIl0gPSAhIWRhdGEuZmlsdGVyRGF0YS52YWx1ZSA/IGRhdGEuZmlsdGVyRGF0YS52YWx1ZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgZmlsdGVyRGF0YSwgZmlsdGVyRGF0ZSB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge31cclxuXHJcbn0iXX0=