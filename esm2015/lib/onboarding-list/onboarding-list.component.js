import { __awaiter } from "tslib";
import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../onboarding.service";
export class OnboardingListComponent {
    constructor(service) {
        this.service = service;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.service.getAllOnboarding();
            this.service.onboarding.subscribe((onboarding) => {
                console.log(onboarding);
                if (onboarding) {
                    this.onboardingList = onboarding;
                }
            });
        });
    }
}
OnboardingListComponent.ɵfac = function OnboardingListComponent_Factory(t) { return new (t || OnboardingListComponent)(i0.ɵɵdirectiveInject(i1.OnboardingService)); };
OnboardingListComponent.ɵcmp = i0.ɵɵdefineComponent({ type: OnboardingListComponent, selectors: [["lib-onboarding-list"]], decls: 1, vars: 0, template: function OnboardingListComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, " List onboarding");
    } }, styles: [""] });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(OnboardingListComponent, [{
        type: Component,
        args: [{
                selector: 'lib-onboarding-list',
                templateUrl: './onboarding-list.component.html',
                styleUrls: ['./onboarding-list.component.scss']
            }]
    }], function () { return [{ type: i1.OnboardingService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25ib2FyZGluZy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL29uYm9hcmRpbmcvIiwic291cmNlcyI6WyJsaWIvb25ib2FyZGluZy1saXN0L29uYm9hcmRpbmctbGlzdC5jb21wb25lbnQudHMiLCJsaWIvb25ib2FyZGluZy1saXN0L29uYm9hcmRpbmctbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQzs7O0FBUWxELE1BQU0sT0FBTyx1QkFBdUI7SUFFbEMsWUFBb0IsT0FBeUI7UUFBekIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7SUFBSSxDQUFDO0lBRTVDLFFBQVE7O1lBQ1osTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFDLEVBQUU7Z0JBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3hCLElBQUcsVUFBVSxFQUFDO29CQUNaLElBQUksQ0FBQyxjQUFjLEdBQUMsVUFBVSxDQUFDO2lCQUNoQztZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztLQUFBOzs4RkFaVSx1QkFBdUI7NERBQXZCLHVCQUF1QjtRQzZFcEMsZ0NBQWU7O2tERDdFRix1QkFBdUI7Y0FMbkMsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFdBQVcsRUFBRSxrQ0FBa0M7Z0JBQy9DLFNBQVMsRUFBRSxDQUFDLGtDQUFrQyxDQUFDO2FBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9uYm9hcmRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vb25ib2FyZGluZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLW9uYm9hcmRpbmctbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9vbmJvYXJkaW5nLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9vbmJvYXJkaW5nLWxpc3QuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBPbmJvYXJkaW5nTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOk9uYm9hcmRpbmdTZXJ2aWNlKSB7IH1cbiAgb25ib2FyZGluZ0xpc3Q6YW55XG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGF3YWl0IHRoaXMuc2VydmljZS5nZXRBbGxPbmJvYXJkaW5nKCk7XG4gICAgdGhpcy5zZXJ2aWNlLm9uYm9hcmRpbmcuc3Vic2NyaWJlKChvbmJvYXJkaW5nKT0+e1xuICAgICAgY29uc29sZS5sb2cob25ib2FyZGluZyk7XG4gICAgICBpZihvbmJvYXJkaW5nKXtcbiAgICAgICAgdGhpcy5vbmJvYXJkaW5nTGlzdD1vbmJvYXJkaW5nO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxufVxuIiwiPCEtLTxtYXQtY2FyZCBbbmdTdHlsZV09XCJfbG9hZGluZ190YWJsZSAmJiB7J292ZXJmbG93LXknOiAnaGlkZGVuJywgJ2hlaWdodCc6ICcxMDAlJyxcbidkaXNwbGF5JzogJ2ZsZXgnLCAncG9zaXRpb24nOiAnYWJzb2x1dGUnfVwiIGNsYXNzPVwiZnVsbC1oZWlnaHRcIlxuICAgICAgICAgIHN0eWxlPVwiYmFja2dyb3VuZDogI0Y0RjdGOSAwJSAwJSBuby1yZXBlYXQgcGFkZGluZy1ib3g7XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1haW4tYWxsLXRpY2tldC1saXN0XCIgKm5nSWY9XCJ0aWNrZXRzIHx8IG9uZ29pbmcgfHwgY2xvc2VkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlLXRpdGxlLWNvbnRhaW5lclwiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFnZS10aXRsZVwiPlxuICAgICAgICAgICAgICAgIFN1aXZpIGRlcyBkZW1hbmRlc1xuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWdlLXNlYXJjaFwiPlxuICAgICAgICAgICAgICAgIDxtYXQtaWNvbj5zZWFyY2g8L21hdC1pY29uPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBbKG5nTW9kZWwpXT1cImlucHV0U2VhcmNoXCIgY2xhc3M9XCJzZWFyY2gtYm94XCIgcGxhY2Vob2xkZXI9XCJ7eydMSVNULlNFQVJDSCcgfCB0cmFuc2xhdGV9fVwiXG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCI+XG5cbiAgICAgICAgICAgICAgICA8aW1nIChjbGljayk9XCJjYW5jZWxTZWFyY2goKVwiICpuZ0lmPVwiaW5wdXRTZWFyY2ggJiYgaW5wdXRTZWFyY2ggIT0gJydcIlxuICAgICAgICAgICAgICAgICAgICAgW3NyY109XCInL2Fzc2V0cy9pY29ucy9zZWFyY2hfb2ZmLTI0cHguc3ZnJ1wiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LXZpZXctbGlzdC10aWNrZXRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0LXRhYi1sZWZ0XCI+XG4gICAgICAgICAgICAgICAgVm91cyBhdmV6IGFjdHVlbGxlbWVudFxuXG4gICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJpbmRleCA9PSAwXCIgY2xhc3M9XCJtYXQtdGFiLWxlZnQtY291bnRcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgb25nb2luZz8udG90YWxFbGVtZW50cyB9fSB0aWNrZXQocylcbiAgICAgICAgICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cImluZGV4ID09IDFcIiBjbGFzcz1cIm1hdC10YWItbGVmdC1jb3VudFwiPlxuICAgICAgICAgICAgICAgICAgICB7e19sb2FkaW5nX3RpY2tldHNfY2xvc2VkID8gdGlja2V0Q2xvc2VkTmIgOiBjbG9zZWQ/LnRvdGFsRWxlbWVudHN9fSB0aWNrZXQocylcbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8bWF0LXRhYi1ncm91cCBbQC5kaXNhYmxlZF09XCJ0cnVlXCIgY2xhc3M9XCJsaXN0LXRpY2tldC10YWJcIiBbKHNlbGVjdGVkSW5kZXgpXT1cImluZGV4XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWxlY3RlZFRhYkNoYW5nZSk9XCJ0cmlnZ2VyQ2hhbmdlKCRldmVudClcIj5cbiAgICAgICAgICAgICAgICA8bWF0LXRhYj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIG1hdC10YWItbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICBPbmJvYXJkaW5nICh7e29uZ29pbmc/LnRvdGFsRWxlbWVudHMgfHwgb25nb2luZz8uZGF0YT8ubGVuZ3RofX0pXG4gICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBtYXRUYWJDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cIl9sb2FkaW5nX3RhYmxlIHx8ICFvbmdvaW5nXCIgY2xhc3M9XCJidC1zcGlubmVyXCI+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW25nU3R5bGVdPVwiX2xvYWRpbmdfdGFibGUgJiYgeydtYXJnaW4tYm90dG9tJzogJzEwMHZoJ31cIj48L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBbY2xhc3MudGlja2V0LWxpc3RdPVwiIV9sb2FkaW5nX3RhYmxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5neC1kZXNpZ24tdGFibGUgKm5nSWY9XCJvbmdvaW5nXCIgW2NvbHVtbkRlZmluaXRpb25zXT1cImNvbHVtbkRlZmluaXRpb25zT3BlbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGlzcGxheURldGFpbF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGlzcGxheUNvbXBvbmVudF09XCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRhXT1cIm9uZ29pbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtsYW5nXT1cImxhbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtidG5PdmVycmlkZV09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbaW5wdXRTZWFyY2hdPVwiaW5wdXRTZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtFbXB0eVJvd109XCJ0cnVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZ3gtZGVzaWduLXRhYmxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9tYXQtdGFiPlxuICAgICAgICAgICAgICAgIDxtYXQtdGFiPlxuICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgbWF0LXRhYi1sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9mZmJvYXJkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAoe3tfbG9hZGluZ190aWNrZXRzX2Nsb3NlZCA/IHRpY2tldENsb3NlZE5iIDogKGNsb3NlZD8udG90YWxFbGVtZW50cyB8fCBjbG9zZWQ/LmRhdGE/Lmxlbmd0aCl9fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwiX2xvYWRpbmdfdGlja2V0c19jbG9zZWRcIiBjbGFzcz1cInRocmVlLXF1YXJ0ZXJzLWxvYWRlclwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIG1hdFRhYkNvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiX2xvYWRpbmdfdGFibGUgfHwgIWNsb3NlZFwiIGNsYXNzPVwiYnQtc3Bpbm5lclwiPjwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IFtuZ1N0eWxlXT1cIl9sb2FkaW5nX3RhYmxlICYmIHsnbWFyZ2luLWJvdHRvbSc6ICcxMDB2aCd9XCI+PC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgW2NsYXNzLnRpY2tldC1saXN0XT1cIiFfbG9hZGluZ190YWJsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZ3gtZGVzaWduLXRhYmxlICpuZ0lmPVwiY2xvc2VkXCIgW2NvbHVtbkRlZmluaXRpb25zXT1cImNvbHVtbkRlZmluaXRpb25zQ2xvc2VkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGlzcGxheURldGFpbF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZGlzcGxheUNvbXBvbmVudF09XCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtkYXRhXT1cImNsb3NlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2xhbmddPVwibGFuZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2J0bk92ZXJyaWRlXT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbnB1dFNlYXJjaF09XCJpbnB1dFNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW0VtcHR5Um93XT1cInRydWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25neC1kZXNpZ24tdGFibGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L21hdC10YWI+XG4gICAgICAgICAgICA8L21hdC10YWItZ3JvdXA+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9tYXQtY2FyZD4tLT5cblxuTGlzdCBvbmJvYXJkaW5nIl19