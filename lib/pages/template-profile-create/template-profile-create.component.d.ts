import { ActivatedRoute, Router } from "@angular/router";
import { CdkDragDrop } from "@angular/cdk/drag-drop";
import { OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup } from "@angular/forms";
import { MatChipInputEvent } from "@angular/material/chips";
import { MatDialog } from "@angular/material/dialog";
import { OnboardingService } from "../../onboarding.service";
import { ScrollToService } from '@nicky-lenaers/ngx-scroll-to';
import * as i0 from "@angular/core";
export declare class TemplateProfileCreateComponent implements OnInit {
    private fb;
    service: OnboardingService;
    private route;
    private router;
    private dialog;
    private scrollToService;
    form: UntypedFormGroup;
    validCategory: boolean;
    separatorKeysCodes: number[];
    currentProfil: any;
    canExit: boolean;
    tags: any[];
    id: string;
    parent: any[];
    loading: boolean;
    editIndex: any;
    showProfileName: boolean;
    locale: any;
    liveLabel: any;
    draftLabel: any;
    invalideValue: boolean;
    isPictoListShow: boolean;
    picto: string;
    all: string;
    s1: string;
    s2: string;
    s3: string;
    s4: string;
    conditionData: {
        all: any[];
        s1: any[];
        s2: any[];
        s3: any[];
        defaultValue: any[];
    };
    categories: any[];
    isBlock: boolean;
    isSection: boolean;
    currentEditBlock: any;
    currentChip: string;
    prevValue: string;
    paramsIndex: any[];
    historics: any[];
    currentCanceledIndex: any;
    newFieldIndex: any;
    isSubmitted: boolean;
    constructor(fb: UntypedFormBuilder, service: OnboardingService, route: ActivatedRoute, router: Router, dialog: MatDialog, scrollToService: ScrollToService);
    defaultCategorie: any;
    canDeactivate(): true | import("rxjs").Subject<boolean>;
    onScroll(event: any): void;
    initForm(): void;
    ngOnInit(): Promise<void>;
    private getProfileCategories;
    onAddNewCategory(e: any): void;
    onChangeCategoryName(): void;
    checkBlink(index: any, level: any): string;
    onChangeKey(editBlok: any): void;
    onCreateKey: (name: string) => string;
    onAddNewField(...params: any[]): void;
    onAddNewSubLevelField(...params: any[]): void;
    onRemoveField(...params: any[]): void;
    onRemoveCategory(e: any, i: any): void;
    onChangeCategory(): boolean;
    onSubmit(isPublish: boolean): Promise<void>;
    onChangeType(type: string, ...params: any[]): void;
    onKeyPress(event: any, ...params: any[]): void;
    removeKeyword(keyword: any, ...params: any[]): void;
    scrollTo(category: any, i: any): void;
    onExpendMore(event: any, ...params: any[]): void;
    onCheckedDefault(event: any, ...params: any[]): void;
    addKeywordFromInput(event: MatChipInputEvent, prev: any, ...params: any[]): void;
    drop(event: CdkDragDrop<string[]>): void;
    dropField(event: CdkDragDrop<string[]>): void;
    private saveCategoriesToSessionStorage;
    ingoreDefaultAction(e: any): void;
    onShowCategory(): void;
    onSelectPicto(e: any, picto: any): void;
    onShowPictoList(e: any): void;
    onChangeLabel(event: any, ...params: any[]): void;
    onCheckedChip(event: any, ...params: any[]): void;
    openDialog(): void;
    onPassInEditMode(i: any): void;
    onEdit(): void;
    onEditCategoryName(i: any, name: any): void;
    onAcrelink(e: any): void;
    getConditionValues(): void;
    onSelectCondition(level: any, subLevel: any, value: any): void;
    onGetDefaultValue(): any;
    onActiveMenu(cat: any, i: any): void;
    catNameStart(str: string): boolean;
    onEditBlock(block: any, ...params: any[]): void;
    onRemoveblock(event: any, block: any): void;
    onRemoveFieldBlock(event: any): void;
    onDuplicatedBlock(event: any): void;
    onEditableBlock(notEditableBlock: any): any;
    onKeyUpChip(event: any, field: any): void;
    onEditChip(chip: any): void;
    addKeywordFromInputBlock(event: MatChipInputEvent, field: any, prev: any): void;
    onCheckedChipBlock(event: any, field: any): void;
    removeKeywordBlock(keyword: any, field: any): void;
    onChangeTypeBlock(field: any): void;
    onAddNewSubLevelFieldBlock(event: any): void;
    onOpenTypeDialog(field: any): void;
    fieldWidth(type: string, length: number, index: number): "100%" | "50%" | "33%";
    onCancel(left: boolean): void;
    onCheckValue(event: boolean): void;
    onHistorics(data: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TemplateProfileCreateComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TemplateProfileCreateComponent, "onboarding-create-profile-template", never, {}, {}, never, never, false>;
}
